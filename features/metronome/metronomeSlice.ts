import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import type { AppState } from '../../app/store'
import { Song } from '../../models/Song'
import { fetchSongsByBPM } from './getSongAPI'


export interface MetronomeState {
  bpm: number | null
  songs: Song[]
  status: 'idle' | 'loading' | 'failed'
}

const initialState: MetronomeState = {
  bpm: null,
  songs: [],
  status: 'idle'
}

export const getSongsByBPM = createAsyncThunk(
  'songs/getSongs',
  async (bpm: number) => {
    const response = await fetchSongsByBPM(bpm)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  },
)

export const metronomeSlice = createSlice({
  name: 'songs',
  initialState,
  reducers: {
    selectBPM: (state, { payload }: PayloadAction<number>) => {
      state.bpm = payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getSongsByBPM.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(getSongsByBPM.fulfilled, (state, action: PayloadAction<Song[]>) => {
        state.status = 'idle'
        state.songs = action.payload
      })
  },
})

export const { selectBPM } = metronomeSlice.actions

export const selectCurrentBPM = (state: AppState) => state.songs.bpm

export default metronomeSlice.reducer
